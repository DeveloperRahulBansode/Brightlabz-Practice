using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PracticeQuestions
{
    internal class InputAndOutput
    {
        public static int printManu()
        {
            Console.WriteLine("1 --> Write a program which displays 5 your friends' names");
            Console.WriteLine("2 --> Write a program which  prompts user to enter 2 numbers (numbers can have decimal numbers). Program computes the square of sum of these two numbers and square of difference between these 2 numbers . ");
            Console.WriteLine("3 --> Write a program which takes input of a place name  where you would like to visit most and displays that with place with  uppercase once and then all lower case once");
            Console.WriteLine("4 --> Read a number from user as string and print 10 times of that number as string only");
            Console.WriteLine("5 --> Write a program which takes  a command line arguments  of a person's full name (First Name, Last Name, Middle name(s) if any) and prints how many parts  are there in the name. Also puts different parts of arguments in one variable and prints the same");
            Console.WriteLine("6 --> Compute Average of numbers. Generate 5 random numbers between 10 to 50  and compute the average of these numbers . Print the numbers generated in one line and in next line print the average.");
            Console.WriteLine("7 --> Compute perimeter and area of a circle. Take diameter of circle as user input, Compute and print out perimeter and area of circle.");
            Console.WriteLine("8 --> C# Problem statements\nDevelop  a program to get next day of a given date. \nExpected Output:\nInput a year: 2020\r\nInput a month [1-12]: 08\r\nInput a day [1-31]: 23 \r\nThe next date is [yyyy-mm-dd] 2020-8-24");
            Console.WriteLine("9 --> Write a program which will find the execution time if the program.");
            Console.WriteLine("10 --> Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).  The numbers obtained should be printed in a comma-separated sequence on a single line.\r\n");
            Console.WriteLine("11 --> Write a program which can compute the factorial of a given numbers.  Develop this as function and call from main. function should return factorial. \r\nSuppose the following input is supplied to the program: 8 Then, the output should be: 40320");
            Console.WriteLine("12 --> Write a Program to Print 1 to 100 without using loop.");
            Console.WriteLine("13 --> Write a Program to to Find Roots of a Quadratic Equation. (using If Else statement or switch The roots of a Quadratic Equation (ax2+bx+c) depends upon the discriminant value.)");
            Console.WriteLine("14 --> Convert a number to a string, the contents of which depend on the number's factors.\r\n\r\nIf the number has 3 as a factor, output 'Pling'.\r\nIf the number has 5 as a factor, output 'Plang'.\r\nIf the number has 7 as a factor, output 'Plong'.\r\nIf the number does not have 3, 5, or 7 as a factor, just pass the number's digits straight through. \r\n(Example :28 has 7 as a factor, but not 3 or 5, so the result would be “Plong”.\r\n30 has both 3 and 5 as factors, but not 7, so the result would be “PlingPlang”.\r\n34 is not factored by 3, 5, or 7, so the result would be “34”.)");
            Console.WriteLine("15 --> Write a program which takes a string as user input and checks presence of a, e  and p.If all these three  characters are present , it prints  \"All Present\" or if any one of these three is present, it print \"One or more - Present\", if none is present, it prints \"None Present\". \r\nTest this with different combination of strings.\r\nPlan using logical AND n OR");
            Console.WriteLine("16 --> Write a program that takes an array of floats and returns the average of these numbers");
            Console.WriteLine("17 --> Write a Program that accepts an array of integer and returns prime number among them");
            Console.WriteLine("18 --> Write a Program to shift all zero to the end of array.\r\n(For Example : Input: 12 0 42 0 4 \r\nOutput: 12 42 4 0 0)");
            Console.WriteLine("19 --> Write a Program to find the first repeated element in the array ( read elements of the array from the user and then find the first repeated element in a one-dimensional array)");
            Console.WriteLine("20 --> Write a program where an user enters an arithmatic expression (eg 70+18/2 or 90/10+1, 7-2+5). Program checks the syntax of expression whether valid operators are present (+, *, -,/) and there are numbers beside them. If the expression is valid then program solves in the order Divison first ,then multplication, addition then substraction. Result is printed out. ");
            Console.WriteLine("21 --> Write a Program to find Length of the longest substring without repeating characters.\r\n(For example\r\n1.“ABDEFGABEF”, the longest substring are “BDEFGA” and “DEFGAB”, with length 6.\r\n2. \"AAAAAB\", the longest substring is B with length 1) ");
            Console.WriteLine("22 --> Write a program in C# Sharp to delete an element at desired position from an array.\r\nTest Data :\r\nInput the size of array : 5\r\nInput 5 elements in the array in ascending order:\r\nelement - 0 : 1\r\nelement - 1 : 2\r\nelement - 2 : 3\r\nelement - 3 : 4\r\nelement - 4 : 5\r\nInput the position where to delete: 3\r\nExpected Output :\r\nThe new list is : 1 2 4 5");
            Console.WriteLine("23 --> Write a program in C# Sharp to find the second largest element in an array. \r\nTest Data :\r\nInput the size of array : 5\r\nInput 5 elements in the array :\r\nelement - 0 : 2\r\nelement - 1 : 9\r\nelement - 2 : 1\r\nelement - 3 : 4\r\nelement - 4 : 6\r\nExpected Output :\r\nThe Second largest element in the array is: 6");
            Console.WriteLine("24 --> Write a C# Sharp program to remove all duplicate elements from a given array and returns a new array.\r\nTest Data :\r\nOriginal array elements:\r\n25\r\nAnna\r\nFalse\r\n25\r\n4/15/2021 12:10:51 PM\r\n112.22\r\nAnna\r\nFalse\r\n\r\nAfter removing duplicate elements from the said array:\r\n25\r\nAnna\r\nFalse\r\n4/15/2021 12:10:51 PM\r\n112.22");
            Console.WriteLine("25 --> Write a C# Sharp program that calculates the smallest gap between the numbers in an array of integers. Go to the editor\r\nSample Data:\r\n({ 7, 5, 8, 9, 11, 23, 18 }) -> 1 (diff btw 8,9)\r\n({ 200, 300, 250, 151, 162 }) -> 11 (diff btw 151, 162)");
            Console.WriteLine("26 --> Write a C#  program to convert entered days into years , months and weeks.\r\nTest Data:\r\nenter days as 768\r\nOutput:\r\nyears:2\r\nMonths: 24\r\nweeks: 96");
            Console.WriteLine("27 --> Write a C# program to find the square root of a given number without using Math.Sqrt() method.");
            Console.WriteLine("28 --> Write a C# program to find prime numbers from 1 to 100.");
            Console.WriteLine("29 --> Write a C# program to demonstarte working of inheritance.\r\nsample data:\r\ntake a class an define varibles, In other class perform sum of those two variables using inheritance.");
            Console.WriteLine("30 --> Write a C# program to convert from celsius degrees to Kelvin and Fahrenheit. \r\nTest Data:\r\nEnter the amount of celsius: 30\r\nExpected Output:\r\nKelvin = 303\r\nFahrenheit = 86");
            Console.WriteLine("31 --> Write a C# program to reverse the words of a sentence. \r\nSample Output:\r\nOriginal String: Display the pattern like pyramid using the alphabet.\r\nReverse String: alphabet. the using pyramid like pattern the Display");
            Console.WriteLine("32 --> Write a C# program to compute the sum of all the elements of an array of integers. \r\nTest Data:\r\nArray1: [1, 2, 2, 3, 3, 4, 5, 6, 5, 7, 7, 7, 8, 8, 1]\r\nSample Output\r\nSum: 69");
            Console.WriteLine("33 --> Write a c# program to find whether the given file path exist , if not create the path.\r\nsample data:\r\npath:\"c:/csharp/ex/test.txt\";");
            Console.WriteLine("34 --> Write a c# program to find whether the given file path exist , if exist read data from the text file.\r\nsample data:\r\npath:\"c:/csharp/ex/test.txt\";");  
            Console.WriteLine("35 --> Program to take height as input and print .its category as Dwarf, Average, and Tall.sample data: Dwarf= below 150, Tall= above 160, avg= between 155 and 160");
            Console.WriteLine("36 --> Write a program in C# to find the positive numbers from a list of numbers using two where conditions in LINQ Query.");
            Console.WriteLine("37 --> Write a program using a loop that prints the following output.\r\n1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 . . . nth iteration.\r\nSample: enter input: 3, output: 1 22 333");
            Console.WriteLine("38 --> Write a program using a switch statement that takes one character value from the user and checks whether the entered value is an arithmetic operator, logical operator, conditional operator, relational operator or something else.\r\n\r\nSample data:\r\narithmetic= +,-,*  Logical= \" &&, ||  \" Relational= \"==, <, >\"");
            Console.WriteLine("39 --> Write a program that takes three points (x1, y1), (x2, y2) and (x3, y3) from the user and the program will check wheteher or not all the three points fall on one straight line.");
            Console.WriteLine("40 --> Write a C# program that converts hours into minutes and  seconds.\r\nsample data:\r\ninput: 1 hr\r\noutput: 3600 sec");
            Console.WriteLine("41 --> Write a program in C# to find the number of an array and the square of each number in LINQ Query.\r\nsample data:\r\ninput: int[] arr");
            Console.WriteLine("42 --> Write a C# program that takes one value from the user and checks whether the entered value is a character, integer or special symbol.");
            Console.WriteLine("43 --> Write a method in C# that takes two values, n1 and n2, as arguments and multiply the n1 by itself n2 times. In other words, calculate n1n2 and then return the result to the main function that will display the result.\r\n");
            Console.WriteLine("44 --> You will be working with a database table called \"Students\". The table has the following columns: \"Name\" (string), \"Age\" (int), and \"Grade\" (double).\r\n\r\nYour task is to write a console application in C# that interacts with the \"Students\" table and performs the following tasks:\r\n\r\n1. Create the \"Students\" table in SQL Server Management Studio (SSMS).\r\n\r\n2. Write a method called \"RetrieveStudents\" that retrieves all the students from the \"Students\" table and writes their names, ages, and grades to the console.\r\n\r\n3. Write a generic method called \"RankStudents<T>\" that ranks the students in the \"Students\" table based on their grades in descending order. The method should take a parameter of type T, which represents the type of the ranking algorithm to use. The method should return a list of student names, in order from highest to lowest rank.\r\n\r\nFor example, if the generic type parameter T is \"int\", the ranking algorithm could be based on the students' grades rounded to the nearest integer. If T is \"double\", the ranking algorithm could be based on the students' exact grades. You can choose any ranking algorithm you like.\r\n\r\nSample data : \r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Alice', 18, 85.5);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Bob', 17, 92.3);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Charlie', 19, 78.9);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('David', 18, 81.2);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Emma', 17, 95.0);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Frank', 19, 79.5);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Grace', 18, 89.1);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Henry', 17, 91.8);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('Isabella', 19, 86.4);\r\n    INSERT INTO Students (Name, Age, Grade) VALUES ('John', 18, 88.7);");
            Console.WriteLine("45 --> Develop an Employee Management System that allows users to add, delete, update and view employee records.\r\n\r\nThe system should use data structures such as lists and dictionaries to store and manage employee data. Each employee record should contain the following information:\r\n\r\nEmployee ID (unique identifier)\r\nEmployee Name\r\nEmployee Age\r\nEmployee Salary\r\n\r\nThe system should implement custom exception handling, allowing the user to create their own exception classes and messages. This should be used to handle errors such as invalid employee data input, duplicate employee IDs, and other relevant exceptions.\r\n\r\nThe system should be tested using unit testing. Ensure that each method is tested with relevant test cases, and that the system functions as expected.");
            Console.WriteLine("46 --> Pair Intersection\r\nWrite a function that accepts two pairs of numbers [ a, b ] and [ c, d ] where each pair represents the range a to b and c to d respectively. The function upon execution returns another pair [ x, y ] which is the intersection of the above two pairs.\r\n\r\nint [ ] pair_intersection( [ a, b ], [ c, d ] ) {\r\n……..\r\nyour code\r\n…….\r\nreturn [x, y ]\r\n}\r\nExample:\r\nInput:\r\n[ a, b ] = [ 11, 16 ] ( which means [11, 12, 13, 14, 15, 16])\r\n[ c, d ] = [ 14, 21 ]  (which means [14, 15, 16, 17, 18, 19, 20, 21]\r\nOutput:\r\n[ x, y ] = [ 14, 15, 16 ]\r\n \r\nNote:\r\n1.  This function should take 2 pairs as its arguments (each pair is an array or tuple of exactly two numbers)\r\n2.  Return element should be a pair (each pair is an array or tuple of exactly two numbers)\r\n3.  Function complexity should be linear (should not have loop within a loop)");
            Console.WriteLine("47 --> Pyramid Arrangement\r\nGiven to you is an unordered / unsorted integer array of size n. Reorder the array in such a way that the largest number of the array is in the middle index of the array and the remaining numbers which are lesser than or equal to the previous element should be arranged in descending order as we move to the edges of the array ((0, n-1) index).\r\nNote that as we move to the edges of the array, you will need to arrange the elements in the descending order starting from the middle index. You have to place the next largest after the largest element (the middle element) on either side of the middle element.\r\nIf n is even, you can consider either of the n/2-1'^ or n/2t^ index as your middle element and place the largest element in either of those indexes and move towards edges from there.\r\nDo in-place rearrangement of the elements. Do not use another/extra array. At max use one or  two non-loop variables. Programs not following this rule will not be considered.\r\nExample:\r\nInput:\r\n1, 4, 3, 6, 8, 7, 9, 2, 5, 0, 12, 23, -1\r\nOutput:\r\n-1, 1, 3, 5, 7, 9, 23, 12, 8, 6, 4, 2, 0\r\nint [ ] pyramid(int arr[ ], int n) {\r\n……………..\r\nyour code\r\n……………\r\nreturn arr [ ]\r\n}");
            Console.WriteLine("48 --> The vending machine \nWrite a program to calculate the change returned by a vending machine when you buy something from it. The coins are numbered by their value in paise.\r\n[1, 5, 10, 25, 50, 100]\r\n1 being 1 paise & 100 being 100 paise or 1 Rupee.\r\nIf a person inserted 5 Rs and bought something worth 2.99 Rs then he would get one 1 paise join & two 100 paise coins. So the answer will be.\r\n[1, 0,0, 0, 0, 2]\r\nComplete the following function\r\nfunction getChange(price_of_item. money_given_to_purchase) {\r\n// write code here\r\n// return change\r\n// return [0, 0, 0, 0, 0, 0]\r\n}");
            Console.WriteLine("49 --> Time slot calculator\nWrite a function to calculate available time slots for the purpose of booking an appointment.I. Given an input which is an array of arrays of existing appointments, calculate the available time slots for the day. The input will be an array containing:\r\n[[from_time_1,to_time_1],[from_time_2,to_time_2],[from_time_3,to_time_3]]\r\nThe available time slots start from 0 hours to 24 hours. From and To times are always integers( not fraction and net floating point).\r\n Input (appointments)\r\n[[10, 12], [14, 15], [16, 20]]\r\nWhich means there is an appointment from 10 to 12 & so on.\r\nOutputs (available slots)\r\n[[0, 10],[12, 14], [15, 16], [20, 24]]\r\nNow negating the input from 24 hours, you have four free time slots till the start of next day.");
            Console.WriteLine("50 --> Pick Squares\r\n\r\nWrite a function for picking up the numbers which are squares of positive integers from a given array and do a sort which is not a brute force sort or a bubble sort. Basically the complexity of the algorithm should be lease than O(n2)\r\nExample 1: \r\nInput: [169,145,225,211,121,183,100,111,196,214,275]\r\nOutput: [100,121,169,196,225]");
            Console.WriteLine("51 --> Increasing digits Sum\r\n\r\nGiven an input number N. Print all the numbers which are formed by the combinations of digits where the sum of all the digits of the equal to the number N (your Input). Also note that the digits of the number must be in increasing order from left to right.\r\n\r\nNote: Exclude zeros as digits in your number.\r\n\r\nExample 1: Input N=3\r\n1 1 1\r\n1 2\r\n3\r\n\r\nExample 2: Input N=5\r\n1 1 1 1\r\n1 1 2\r\n1 3\r\n2 2\r\n4\r\n");
            Console.WriteLine("52 --> Find all n-digit numbers with a given sum of digits\r\n\r\nGiven two inputs n and sumN, where n<9, find all n digit numbers where the sum of their digits is equal to sumN\r\n\r\nExample : n=3 and sum =6\r\ninput :3,6\r\n\r\nOutput: 3-digit numbers with sum 6 are\r\n105 114 123 132 141 150 204 213 222 231 240 303 312 321 330 402 411 420 501 510 600 ");
            Console.WriteLine("53 --> Longest common Prefix\r\n\r\nWrite a program to find the longest common prefix among all the input string. So the longest common prefix in the below example will be “intelli” as all the above strings in the array start with “intelli”.( Your Program should work for any input, not just the one given in example)\r\n\r\nExample 1:\r\nInput: [“intelliBlue”,”intelliFeeder”,”intelliAuth”]\r\n\r\nOutput: longest prefix = “intelli”");
            Console.WriteLine("54 --> Write a program where an user enters an arithmatic expression (eg 70+18/2 or 90/10+1, 7-2+5). Program checks the syntax of expression whether valid operators are present (+, *, -,/) and there are numbers beside them. If the expression is valid then program solves in the order Divison first ,then multplication, addition then substraction. Result is printed out. ");
            

            Console.WriteLine();
            Console.WriteLine("Sekect Which Program You want To perform =");
            int choice = Convert.ToInt32(Console.ReadLine());
            return choice;
        }

    }
}
